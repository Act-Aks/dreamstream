name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.FULL_TOKEN }}
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
    outputs:
      released: ${{ steps.check-release.outputs.released }}
      version: ${{ steps.check-release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ env.GH_TOKEN }}

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          frozen-lockfile: 'true'

      - name: Setup Expo CLI
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          packager: 'bun'
          token: ${{ env.EXPO_TOKEN }}

      - name: Run semantic-release
        id: semantic-release
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          cd apps/dreamstream
          bun run release

      - name: Check release
        id: check-release
        run: ./scripts/check-release.sh "${{ steps.semantic-release.outputs.next-release-version }}"
         

  build:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.FULL_TOKEN }}
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.FULL_TOKEN }}

      - name: Checkout release tag
        run: |
          echo "ðŸ“„ Checking out to release tag: v${{ needs.release.outputs.version }}"
          git fetch origin --tags
          git checkout "v${{ needs.release.outputs.version }}"
          echo "ðŸ“„ Current commit: $(git rev-parse HEAD)"
          echo "ðŸ“„ Tag commit message: $(git log -1 --pretty=format:'%s')"

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-deps
        with:
          frozen-lockfile: 'true'

      - name: Setup Expo CLI
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          packager: 'bun'
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Setup Java 17
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify version consistency
        run: ./scripts/verify-version.sh "${{ needs.release.outputs.version }}"

      - name: Build and package APKs
        env:
          VERSION: ${{ needs.release.outputs.version }}
          REPOSITORY: ${{ github.repository }}
        run: ./scripts/build-and-package.sh "${{ needs.release.outputs.version }}"

      - name: Get contributors for this release
        env:
          GITHUB_TOKEN: ${{ secrets.FULL_TOKEN }}
        run: ./scripts/get-contributors.sh

      - name: Calculate APK sizes and metadata
        env:
          GITHUB_TOKEN: ${{ secrets.FULL_TOKEN }}
        run: ./scripts/calculate-metadata.sh "${{ needs.release.outputs.version }}"

      - name: Upload APK variants and QR codes to release
        env:
          GITHUB_TOKEN: ${{ secrets.FULL_TOKEN }}
        run: ./scripts/upload-release-assets.sh "${{ needs.release.outputs.version }}"

      - name: Generate release notes from template
        env:
          GITHUB_TOKEN: ${{ secrets.FULL_TOKEN }}
        run: |
          # Export all required environment variables
          export VERSION="${{ needs.release.outputs.version }}"
          export REPOSITORY="${{ github.repository }}"
          export CURRENT_BODY=$(gh release view v${{ needs.release.outputs.version }} --json body --jq .body)
          
          # Make script executable and run it
          ./scripts/generate-release-notes.sh
          
          # Update the release with enhanced notes
          gh release edit v${{ needs.release.outputs.version }} --notes-file release_notes.md

      - name: Release Summary
        run: ./scripts/release-summary.sh "${{ needs.release.outputs.version }}" "${{ github.repository }}"
